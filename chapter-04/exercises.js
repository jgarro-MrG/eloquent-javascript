////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(a, b, step=1) {
  let output = []
  if (step >= 1) {
    if (a < b) {
      for (let i = a; i <= b; i += step) {
        output.push(i);
      }
    } else if (a > b) {
      for (let i = a; i >= b; i -= step) {
        output.push(i);
      }
    }
  }
  return output;  
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  var total = 0;
  for (let i = 0; i < array.length; i++) {
    total += array[i]
  }
  return total;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  let reversedArray = [];
  for (let i = 0; i < array.length; i++) {
    reversedArray.unshift(array[i]);
  }
  return reversedArray;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  reversedArray = reverseArray(array);
  for (let i = 0; i < array.length; i++) {
    array[i] = reversedArray[i];
  }
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  let list = null;
  for (let i = array.length - 1; i >= 0; i--) {
    list = { value: array[i], rest: list }
  }
  return list;
}


////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list, output=[]) {
  // base
  if (list.rest === null) {
    output.push(list.value);
    return output;
  }

  // recursion
  output.push(list.value);
  return listToArray(list.rest, output)
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/*
takes an element and a list and 
creates a new list that adds the element 
to the front of the input list, 
*/ 
function prepend(element, list) {
  let newList = {};
  newList.value = element;
  newList.rest = list;
  return newList;
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/*
 takes a list and a number
 returns the element at the given position in the list
 (with zero referring to the first element) 
 or undefined when there is no such element.
*/
function nth(list, n) {
  if (n < 0) {
    return undefined;
  }
  // base 
  if (n === 0) {
    return list.value
  }
  // recursion
  return nth(list.rest, n-1)
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(foo, bar) {

  if (typeof foo !== 'object' && typeof bar !== 'object')  {
    return foo === bar;
  }

  if (typeof foo !== 'object' || typeof bar !== 'object')  {
    return false;
  }

  const fooKeys = Object.keys(foo);
  const barKeys = Object.keys(bar);

  if (fooKeys.length !== barKeys.length) {
    return false;
  }

  for (let i = 0; fooKeys.length; i++) {
    if (!barKeys.includes(fooKeys[i]) || !deepEqual(foo[fooKeys[i]], bar[barKeys[i]])) {
      return false;
    } else {
      return true;
    } 
  }
  return true;
  /*
  
  if (foo === null && bar === null) {
    result = true
  } else if (typeof foo === 'number' && typeof bar === 'number') {
    result = foo === bar;
  } else if (true && !foo === true && !bar) {
    result = false;
  } else if (foo && bar) {
    result = true;
  } else if (Object.keys(foo).length === Object.keys(bar).length) {
    
  }
  

  return result;
  */
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};